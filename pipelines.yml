pipelines:
  - name: pipelinetest
    steps:
      - name: Test
        type: Bash
        configuration:
          runtime:   
            type: image
            image: 
              custom:
                name: pipe-master.jfrog.info:8082/artifactory/docker-local/node/latest
                tag: latest 
                sourceRepository: docker-local
                registry: ranjan_art
        execution:
          onExecute:
            - echo "executing step..."

# resources:
#   - name: artifactory_goo
#     type: GitRepo
#     configuration:
#       path: ranjansingh41/artifactory-go-example
#       branches:
#         include: master
#       gitProvider: ranjan_github
      
# pipelines:
#   - name: go_builds
# #     configuration:   
# #       runtime:       
# #         type: image
# #         image:
# #           custom:
# #             name: vijaydocker1991/u18node
# #             tag: gotesting
# #             options: " "   
#     steps:
#       - name: build_goo
#         type: Bash
#         configuration:
# #           nodePool: ubuntu16
# #           sourceLocation: .
# #           repository: test-go-local
# #           outputLocation: tmp
# #           outputFile: helloranjan
#           inputResources:
#             - name: artifactory_goo
#           integrations:
#             - name: art
#         execution:
#           onStart:
#             - wget https://dl.google.com/go/go1.12.5.linux-amd64.tar.gz
#             - sudo tar -C /usr/local -xzf go1.12.5.linux-amd64.tar.gz
#             - export PATH=$PATH:/usr/local/go/bin
#             - go version 
#             - jfrog --version
              

# pipelines:
#   - name: pipeline_S_PS_Language_0003
#     steps:
#       - name: S_PS_Language_0003
#         type: PowerShell
#         configuration:
#           nodePool: win_2019
#           runtime:
#             type: image
#             image:
#               auto:
#                 language: node
#                 versions:
#                   - 10.18.0
#         execution:
#           onExecute:
#             - node -v
#             - if($(node -v) -ne "v10.18.0"){
#               Write-Error "Stop" -ErrorAction Stop
#               }
#             - dotnet --version
#              - if($(dotnet --version) -ne "3.1.102"){
#                Write-Error "Stop" -ErrorAction Stop
#                }
#             - clang --version
#             - if($(java -version) -ne "openjdk 11.0.2 2019-01-15 OpenJDK Runtime Environment 18.9 (build 11.0.2+9) OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode)"){
#               Write-Error "Stop" -ErrorAction Stop
#               }
#             - if($(clang --version) -Like "clang version 8.0.0 tags/RELEASE_900/final Target x86_64-pc-windows-msvc Thread model posix InstalledDir C\Program Files\LLVM\bin")
#               { Write-Error "Stop" -ErrorAction Stop} 
#             - if($(java --version) -ne "*11.0.2*"){ write-output "working" } else {
#               Write-Error "Stop" -ErrorAction Stop
#               } 
#             - if($(java --version) -ne "openjdk 11.0.2 2019-01-15 ,
#               OpenJDK Runtime Environment 18.9 (build 11.0.2+9) ,
#               OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode)"){
#               Write-Error "Stop" -ErrorAction Stop
#               }  
#             - source /root/.gvm/scripts/gvm
#             - gvm list
#             - gvm use 1.11
#             
#             - gcc --version
#             - go version
#             - if($(go version) -ne "go version go1.12.14 windows/amd64"){
#               Write-Error "Stop" -ErrorAction Stop
#               }
#             - java -version
#             - if($(clang --version) -ne "clang version 9.0.0 (tags/RELEASE_900/final) Target: x86_64-pc-windows-msvc Thread model: posix InstalledDir: C:\Program Files\LLVM\bin"){
#               Write-Error "Stop" -ErrorAction Stop
#               }
     
#             - |
#               [[ "$(node --version)" == *"10.18.0"* ]]
#             - gci env:*
#             - ls Env:
#             - get-childitem -path env:* | get-stepname
#             -  ("$java -version === $13.0.1")
#             - "java -version[]" == "13.0.1[]"
#             - get-childitem env
#             - Get-Variable | format-table
#             - java -version
#             - ant -version
#             - mvn -v
#             - gradle -v
#             - node -v
#             - npm --version
            
#             - |
#               [[ "$(java -version)" == *"13.0.1"* ]]



# resources:
#   - name: test1234
#     type: GitRepo
#     configuration:
#       gitProvider: git_ranjan
#       path: Ranjansingh41/test
      
# pipelines:
#   - name: pipelinestest
# #     configuration:
# #       runtime:       
# #         type: image
#     steps:
#       - name: test
#         type: Bash
#         configuration:
#           nodePool: c7test
#           runtime:
#             type: image
#             image:
# #               auto:
# #                 language: node
# #                 versions:
# #                   - 10.18.0
#               custom:
#                 name: ubuntu      #gcr.io/ship-rc/ubuntu
#                 tag: latest
# #                 sourceRepository: docker-local
#                 registry : AWS
#                 region: us-east-1
#                 autoPull: true
#         execution:
#           onExecute:
#             - echo "Hi"
#             - |
#               [[ "$step_image_name:$step_image_tag" == "docker.bintray.io/jfrog/pipelines-u16node:10.18.0" ]]
#             - node --version
#             - |
#               [[ "$(node --version)" == *"10.18.0"* ]]

#             - echo "hi"
#             - Get-Variable | format-table
#             - if($step_runtime -ne "host"){
#               Write-Error "Stop" -ErrorAction Stop
#               }
#             - write-output "executing step..."
#           onFailure:
#             - write-output  "hello"
#           onSuccess:
#             - write-output  "hello"
            
#       - name: S_Bash2
#         type: PowerShell
#         configuration:
#           nodePool: win_2019
#           inputSteps:
#             - name: S_Bash1
#         execution:
#           onExecute:
#             - echo "executing step..."
            
#       - name: S_Bash3
#         type: Bash
#         configuration:
#           inputResources:
#             - name: test1234
#         execution:
#           onExecute:
#             - echo "hi"
#       - name: S_Bash4
#         type: Bash
#         configuration:
#           inputSteps:
#             - name: S_Bash3
#         execution:
#           onExecute:
#             - echo "executing step..."
