resources:
  - name: dockerbuilds
    type: GitRepo
    configuration:
      path: ranjansingh41/test
      gitProvider: ranjan_github
      branches:
        include: docker
#       buildOn:
#          commit: false
#       sha: master
      
  - name: docker_Builds
    type: BuildInfo
    configuration:
      sourceArtifactory: varsha_art
      buildNumber: 1
      buildName: dockertest  
      
  - name: docker_build_promotes
    type: BuildInfo
    configuration:
      sourceArtifactory: varsha_art
      buildNumber: 1
      buildName: dockertest
      
#   - name: docker_release_Bundles
#     type: ReleaseBundle
#     configuration:
#       sourceDistribution: dist
#       name: test-docker-local
#       version: v1.0  
      
#   - name: docker_release_Bundles
#     type: ReleaseBundle
#     configuration:
#       sourceDistribution: dist
#       name: test-docker-local
#       version: v1.0
#       isSigned: false     

#   - name: docker_distributions
#     type: DistributionRule
#     configuration:
#       sourceDistribution: dist
#       cityName: "*"
#       serviceName: "*"
#       siteName: "*"
#       countryCodes:
#         - IN

pipelines: 
  - name: docker
    steps:
      - name: dockerBuild
        type: DockerBuild
        configuration:
#           nodePool: ubuntu16
          # for docker:
          dockerFileLocation: . # required
          dockerFileName: Dockerfile     # required
          dockerImageName: 'ec2-18-232-118-117.compute-1.amazonaws.com:8082/docker-local/node'  # required 
          dockerImageTag: latest #myImg_$pipeline_name.$run_number #myimage_$pipeline_name.$run_number   # required
          integrations:
            - name: varsha_art
          inputResources:
            - name: dockerbuild    # required
#             - artifactoryFileSpec      # optional
#             - my_docker_image      # optional if base image is private
        execution:
          onStart:
            - echo "hi"
            - docker images 
            - printenv
            - ls -la
            - pushd $res_dockerbuild_resourcePath
            - ls -la
          onSuccess:
            - docker images  

      - name: dockerPush
        type: DockerPush
        configuration:
#           nodePool: ubuntu16
          autoPublishBuildInfo: false
          targetRepository: docker-local  #required
          integrations:
            - name: varsha_art    # required
          inputSteps:
            - name: dockerBuilds     # required
#           outputResources:
#             - name: docker_Buildinfo      # required if autoPublishBuildInfo is true 

#for this DockerPush step it will pushs to artifactory directly without using PublishBuildInfo 
            
      - name: dockerPublish
        type: PublishBuildInfo
        configuration:
#           nodePool: ubuntu16
          #inherits from bash
#           integrations:
          inputSteps:
            - name: dockerPushs     # required
          outputResources:
            - name: docker_Builds  
            
      - name: dockerPromote
        type: PromoteBuild
        configuration:
#           nodePool: ubuntu16
          targetRepository: test-generic-local
          inputSteps:
            - name: dockerPublish
          integrations:
            - name: varsha_art
          inputResources:
            - name: docker_Builds
          outputResources:
            - name: docker_build_promotes
            
#       - name: dockerCreatebundle
#         type: CreateReleaseBundle
#         configuration:
#           nodePool: ubuntu16
#           releaseBundleName: test-docker-local
#           releaseBundleVersion: v2.0.20
#           dryRun: false
#           sign: false
#           description: "testdocker description"
#           inputResources:
#             - name: docker_build_promotes
#           outputResources:
#             - name: docker_release_Bundles
#           releaseNotes:
#             syntax: markdown
#             content: |
#               ## Heading
#                 * Bullet
#                 * Points       
                 
#       - name: dockerSign
#         type: SignReleaseBundle
#         configuration:
#           inputResources:
#             - name: docker_release_Bundles
#           outputResources:
#             - name: docker_release_Bundles
            
#       - name: dockerDistribute
#         type: DistributeReleaseBundle
#         configuration:
#           dryRun: false
#           inputResources:
#             - name: docker_distribution
#             - name: docker_release_Bundles
#           integrations: 
#             - name: dist            
